version: '3.8'

services:
  postgresql:
    image: postgres:${POSTGRES_VERSION:-17}
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    networks:
      - gitlab
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  gitlab:
    image: gitlab/gitlab-ce:${GITLAB_VERSION:-latest}
    restart: unless-stopped
    hostname: ${GITLAB_HOSTNAME}
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url '${GITLAB_EXTERNAL_URL}'
        gitlab_rails['time_zone'] = '${GITLAB_TIMEZONE}'
        gitlab_rails['backup_keep_time'] = ${GITLAB_BACKUP_KEEP_TIME}

        # 外部PostgreSQL設定
        postgresql['enable'] = false
        gitlab_rails['db_adapter'] = 'postgresql'
        gitlab_rails['db_encoding'] = '${GITLAB_DB_ENCODING}'
        gitlab_rails['db_host'] = 'postgresql'
        gitlab_rails['db_port'] = ${POSTGRES_PORT}
        gitlab_rails['db_database'] = '${POSTGRES_DB}'
        gitlab_rails['db_username'] = '${POSTGRES_USER}'
        gitlab_rails['db_password'] = '${POSTGRES_PASSWORD}'

        # SSL設定
        nginx['enable'] = true
        nginx['listen_port'] = 80
        nginx['listen_https'] = ${GITLAB_HTTPS_ENABLED}

        # GitLab Shell設定
        gitlab_rails['gitlab_shell_ssh_port'] = ${GITLAB_SSH_PORT}

        # Pages内部設定
        gitlab_pages['listen_proxy'] = 'localhost:8091'

        # GitLab Pages設定 - パスベース（IPアドレス対応）
        pages_external_url '${GITLAB_PAGES_EXTERNAL_URL}'
        gitlab_pages['enable'] = ${GITLAB_PAGES_ENABLED}
        gitlab_pages['namespace_in_path'] = true
        gitlab_pages['access_control'] = ${GITLAB_PAGES_ACCESS_CONTROL}
        

    ports:
      - '${GITLAB_HTTP_PORT}:80'
      - '${GITLAB_HTTPS_PORT}:443'
      - '${GITLAB_SSH_PORT}:22'
      - '${GITLAB_PAGES_PORT}:8090'
    volumes:
      - gitlab-config:/etc/gitlab
      - gitlab-logs:/var/log/gitlab
      - gitlab-data:/var/opt/gitlab
      - ${GITLAB_BACKUP_PATH}:/var/opt/gitlab/backups
    shm_size: '${GITLAB_SHM_SIZE}'
    depends_on:
      postgresql:
        condition: service_healthy
    networks:
      - gitlab

  gitlab-runner:
    image: gitlab/gitlab-runner:${GITLAB_RUNNER_VERSION:-latest}
    restart: unless-stopped
    environment:
      - CI_SERVER_URL=${GITLAB_EXTERNAL_URL}
      - REGISTRATION_TOKEN=${GITLAB_RUNNER_REGISTRATION_TOKEN}
      - RUNNER_NAME=${GITLAB_RUNNER_NAME:-docker-runner}
      - RUNNER_EXECUTOR=docker
      - DOCKER_IMAGE=docker:latest
      - RUNNER_TAG_LIST=${GITLAB_RUNNER_TAGS:-docker}
    volumes:
      - gitlab-runner-config:/etc/gitlab-runner
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - gitlab
    depends_on:
      - gitlab

  gitlab-backup:
    image: ubuntu:${BACKUP_UBUNTU_VERSION:-latest}
    restart: unless-stopped
    command: |
      bash -c '
      apt-get update && \
      apt-get install -y docker.io && \
      while true; do
        echo "[$(date)] バックアップを開始します"
        docker exec gitlab gitlab-rake gitlab:backup:create
        sleep ${BACKUP_INTERVAL}
      done
      '
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - gitlab
    networks:
      - gitlab

volumes:
  gitlab-config:
    name: ${COMPOSE_PROJECT_NAME:-gitlab}-config
  gitlab-logs:
    name: ${COMPOSE_PROJECT_NAME:-gitlab}-logs
  gitlab-data:
    name: ${COMPOSE_PROJECT_NAME:-gitlab}-data
  gitlab-runner-config:
    name: ${COMPOSE_PROJECT_NAME:-gitlab}-runner-config
  postgresql-data:
    name: ${COMPOSE_PROJECT_NAME:-gitlab}-postgresql-data

networks:
  gitlab:
    driver: bridge
    name: ${COMPOSE_PROJECT_NAME:-gitlab}-network